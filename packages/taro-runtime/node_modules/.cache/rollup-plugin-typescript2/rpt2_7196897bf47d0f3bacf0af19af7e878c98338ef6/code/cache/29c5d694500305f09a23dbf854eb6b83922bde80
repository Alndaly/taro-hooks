{"code":"import { ROOT_STR, STYLE, ID, UID, CLASS, COMMENT } from '../constants';\r\nexport const incrementId = () => {\r\n    let id = 0;\r\n    return () => (id++).toString();\r\n};\r\nexport function isElement(node) {\r\n    return node.nodeType === 1 /* ELEMENT_NODE */;\r\n}\r\nexport function isText(node) {\r\n    return node.nodeType === 3 /* TEXT_NODE */;\r\n}\r\nexport function isComment(node) {\r\n    return node.nodeName === COMMENT;\r\n}\r\nexport function isHasExtractProp(el) {\r\n    const res = Object.keys(el.props).find(prop => {\r\n        return !(/^(class|style|id)$/.test(prop) || prop.startsWith('data-'));\r\n    });\r\n    return Boolean(res);\r\n}\r\n/**\r\n * 往上寻找组件树直到 root，寻找是否有祖先组件绑定了同类型的事件\r\n * @param node 当前组件\r\n * @param type 事件类型\r\n */\r\nexport function isParentBinded(node, type) {\r\n    var _a;\r\n    let res = false;\r\n    while ((node === null || node === void 0 ? void 0 : node.parentElement) && node.parentElement._path !== ROOT_STR) {\r\n        if ((_a = node.parentElement.__handlers[type]) === null || _a === void 0 ? void 0 : _a.length) {\r\n            res = true;\r\n            break;\r\n        }\r\n        node = node.parentElement;\r\n    }\r\n    return res;\r\n}\r\nexport function shortcutAttr(key) {\r\n    switch (key) {\r\n        case STYLE:\r\n            return \"st\" /* Style */;\r\n        case ID:\r\n            return UID;\r\n        case CLASS:\r\n            return \"cl\" /* Class */;\r\n        default:\r\n            return key;\r\n    }\r\n}\r\n//# sourceMappingURL=index.js.map","references":["/Users/inoccent/github/taro-hooks/node_modules/@tarojs/shared/dist/index.d.ts","/Users/inoccent/github/taro-hooks/packages/taro-runtime/src/dom/node_types.ts","/Users/inoccent/github/taro-hooks/packages/taro-runtime/src/constants/index.ts","/Users/inoccent/github/taro-hooks/packages/taro-runtime/src/dom/element.ts","/Users/inoccent/github/taro-hooks/packages/taro-runtime/src/dom/text.ts","/Users/inoccent/github/taro-hooks/packages/taro-runtime/src/dom/node.ts"],"map":"{\"version\":3,\"file\":\"index.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/utils/index.ts\"],\"names\":[],\"mappings\":\"AAEA,OAAO,EACL,QAAQ,EACR,KAAK,EACL,EAAE,EACF,GAAG,EACH,KAAK,EACL,OAAO,EACR,MAAM,cAAc,CAAA;AAMrB,MAAM,CAAC,MAAM,WAAW,GAAG,GAAG,EAAE;IAC9B,IAAI,EAAE,GAAG,CAAC,CAAA;IACV,OAAO,GAAG,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,QAAQ,EAAE,CAAA;AAChC,CAAC,CAAA;AAED,MAAM,UAAU,SAAS,CAAE,IAAc;IACvC,OAAO,IAAI,CAAC,QAAQ,yBAA0B,CAAA;AAChD,CAAC;AAED,MAAM,UAAU,MAAM,CAAE,IAAc;IACpC,OAAO,IAAI,CAAC,QAAQ,sBAAuB,CAAA;AAC7C,CAAC;AAED,MAAM,UAAU,SAAS,CAAE,IAAc;IACvC,OAAO,IAAI,CAAC,QAAQ,KAAK,OAAO,CAAA;AAClC,CAAC;AAED,MAAM,UAAU,gBAAgB,CAAE,EAAe;IAC/C,MAAM,GAAG,GAAG,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;QAC5C,OAAO,CAAC,CAAC,oBAAoB,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,CAAA;IACvE,CAAC,CAAC,CAAA;IACF,OAAO,OAAO,CAAC,GAAG,CAAC,CAAA;AACrB,CAAC;AAED;;;;GAIG;AACH,MAAM,UAAU,cAAc,CAAE,IAAwB,EAAE,IAAY;;IACpE,IAAI,GAAG,GAAG,KAAK,CAAA;IACf,OAAO,CAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,aAAa,KAAI,IAAI,CAAC,aAAa,CAAC,KAAK,KAAK,QAAQ,EAAE;QACnE,IAAI,MAAA,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,IAAI,CAAC,0CAAE,MAAM,EAAE;YAC/C,GAAG,GAAG,IAAI,CAAA;YACV,MAAK;SACN;QACD,IAAI,GAAG,IAAI,CAAC,aAAa,CAAA;KAC1B;IACD,OAAO,GAAG,CAAA;AACZ,CAAC;AAED,MAAM,UAAU,YAAY,CAAE,GAAW;IACvC,QAAQ,GAAG,EAAE;QACX,KAAK,KAAK;YACR,wBAAsB;QACxB,KAAK,EAAE;YACL,OAAO,GAAG,CAAA;QACZ,KAAK,KAAK;YACR,wBAAsB;QACxB;YACE,OAAO,GAAG,CAAA;KACb;AACH,CAAC\"}","dts":{"name":"/Users/inoccent/github/taro-hooks/packages/taro-runtime/node_modules/.cache/rollup-plugin-typescript2/placeholder/utils/index.d.ts","writeByteOrderMark":false,"text":"import type { TaroElement } from '../dom/element';\r\nimport type { TaroText } from '../dom/text';\r\nimport type { TaroNode } from '../dom/node';\r\nexport declare const incrementId: () => () => string;\r\nexport declare function isElement(node: TaroNode): node is TaroElement;\r\nexport declare function isText(node: TaroNode): node is TaroText;\r\nexport declare function isComment(node: TaroNode): boolean;\r\nexport declare function isHasExtractProp(el: TaroElement): boolean;\r\n/**\r\n * 往上寻找组件树直到 root，寻找是否有祖先组件绑定了同类型的事件\r\n * @param node 当前组件\r\n * @param type 事件类型\r\n */\r\nexport declare function isParentBinded(node: TaroElement | null, type: string): boolean;\r\nexport declare function shortcutAttr(key: string): string;\r\n"}}
