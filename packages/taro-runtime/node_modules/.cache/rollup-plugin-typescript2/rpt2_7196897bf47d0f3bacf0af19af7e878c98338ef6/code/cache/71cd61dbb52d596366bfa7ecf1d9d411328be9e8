{"code":"import { options } from '../../options';\r\nfunction initPosition() {\r\n    return {\r\n        index: 0,\r\n        column: 0,\r\n        line: 0\r\n    };\r\n}\r\nfunction feedPosition(position, str, len) {\r\n    const start = position.index;\r\n    const end = position.index = start + len;\r\n    for (let i = start; i < end; i++) {\r\n        const char = str.charAt(i);\r\n        if (char === '\\n') {\r\n            position.line++;\r\n            position.column = 0;\r\n        }\r\n        else {\r\n            position.column++;\r\n        }\r\n    }\r\n}\r\nfunction jumpPosition(position, str, end) {\r\n    const len = end - position.index;\r\n    return feedPosition(position, str, len);\r\n}\r\nfunction copyPosition(position) {\r\n    return {\r\n        index: position.index,\r\n        line: position.line,\r\n        column: position.column\r\n    };\r\n}\r\nconst whitespace = /\\s/;\r\nfunction isWhitespaceChar(char) {\r\n    return whitespace.test(char);\r\n}\r\nconst equalSign = /=/;\r\nfunction isEqualSignChar(char) {\r\n    return equalSign.test(char);\r\n}\r\nfunction shouldBeIgnore(tagName) {\r\n    const name = tagName.toLowerCase();\r\n    if (options.html.skipElements.has(name)) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nconst alphanumeric = /[A-Za-z0-9]/;\r\nfunction findTextEnd(str, index) {\r\n    while (true) {\r\n        const textEnd = str.indexOf('<', index);\r\n        if (textEnd === -1) {\r\n            return textEnd;\r\n        }\r\n        const char = str.charAt(textEnd + 1);\r\n        if (char === '/' || char === '!' || alphanumeric.test(char)) {\r\n            return textEnd;\r\n        }\r\n        index = textEnd + 1;\r\n    }\r\n}\r\nfunction isWordEnd(cursor, wordBegin, html) {\r\n    if (!isWhitespaceChar(html.charAt(cursor)))\r\n        return false;\r\n    const len = html.length;\r\n    // backwrad\r\n    for (let i = cursor - 1; i > wordBegin; i--) {\r\n        const char = html.charAt(i);\r\n        if (!isWhitespaceChar(char)) {\r\n            if (isEqualSignChar(char))\r\n                return false;\r\n            break;\r\n        }\r\n    }\r\n    // forward\r\n    for (let i = cursor + 1; i < len; i++) {\r\n        const char = html.charAt(i);\r\n        if (!isWhitespaceChar(char)) {\r\n            if (isEqualSignChar(char))\r\n                return false;\r\n            return true;\r\n        }\r\n    }\r\n}\r\nexport class Scaner {\r\n    constructor(html) {\r\n        this.tokens = [];\r\n        this.position = initPosition();\r\n        this.html = html;\r\n    }\r\n    scan() {\r\n        const { html, position } = this;\r\n        const len = html.length;\r\n        while (position.index < len) {\r\n            const start = position.index;\r\n            this.scanText();\r\n            if (position.index === start) {\r\n                const isComment = html.startsWith('!--', start + 1);\r\n                if (isComment) {\r\n                    this.scanComment();\r\n                }\r\n                else {\r\n                    const tagName = this.scanTag();\r\n                    if (shouldBeIgnore(tagName)) {\r\n                        this.scanSkipTag(tagName);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return this.tokens;\r\n    }\r\n    scanText() {\r\n        const type = 'text';\r\n        const { html, position } = this;\r\n        let textEnd = findTextEnd(html, position.index);\r\n        if (textEnd === position.index) {\r\n            return;\r\n        }\r\n        if (textEnd === -1) {\r\n            textEnd = html.length;\r\n        }\r\n        const start = copyPosition(position);\r\n        const content = html.slice(position.index, textEnd);\r\n        jumpPosition(position, html, textEnd);\r\n        const end = copyPosition(position);\r\n        this.tokens.push({ type, content, position: { start, end } });\r\n    }\r\n    scanComment() {\r\n        const type = 'comment';\r\n        const { html, position } = this;\r\n        const start = copyPosition(position);\r\n        feedPosition(position, html, 4); // \"<!--\".length\r\n        let contentEnd = html.indexOf('-->', position.index);\r\n        let commentEnd = contentEnd + 3; // \"-->\".length\r\n        if (contentEnd === -1) {\r\n            contentEnd = commentEnd = html.length;\r\n        }\r\n        const content = html.slice(position.index, contentEnd);\r\n        jumpPosition(position, html, commentEnd);\r\n        this.tokens.push({\r\n            type,\r\n            content,\r\n            position: {\r\n                start,\r\n                end: copyPosition(position)\r\n            }\r\n        });\r\n    }\r\n    scanTag() {\r\n        this.scanTagStart();\r\n        const tagName = this.scanTagName();\r\n        this.scanAttrs();\r\n        this.scanTagEnd();\r\n        return tagName;\r\n    }\r\n    scanTagStart() {\r\n        const type = 'tag-start';\r\n        const { html, position } = this;\r\n        const secondChar = html.charAt(position.index + 1);\r\n        const close = secondChar === '/';\r\n        const start = copyPosition(position);\r\n        feedPosition(position, html, close ? 2 : 1);\r\n        this.tokens.push({ type, close, position: { start } });\r\n    }\r\n    scanTagEnd() {\r\n        const type = 'tag-end';\r\n        const { html, position } = this;\r\n        const firstChar = html.charAt(position.index);\r\n        const close = firstChar === '/';\r\n        feedPosition(position, html, close ? 2 : 1);\r\n        const end = copyPosition(position);\r\n        this.tokens.push({ type, close, position: { end } });\r\n    }\r\n    scanTagName() {\r\n        const type = 'tag';\r\n        const { html, position } = this;\r\n        const len = html.length;\r\n        let start = position.index;\r\n        while (start < len) {\r\n            const char = html.charAt(start);\r\n            const isTagChar = !(isWhitespaceChar(char) || char === '/' || char === '>');\r\n            if (isTagChar)\r\n                break;\r\n            start++;\r\n        }\r\n        let end = start + 1;\r\n        while (end < len) {\r\n            const char = html.charAt(end);\r\n            const isTagChar = !(isWhitespaceChar(char) || char === '/' || char === '>');\r\n            if (!isTagChar)\r\n                break;\r\n            end++;\r\n        }\r\n        jumpPosition(position, html, end);\r\n        const tagName = html.slice(start, end);\r\n        this.tokens.push({\r\n            type,\r\n            content: tagName\r\n        });\r\n        return tagName;\r\n    }\r\n    scanAttrs() {\r\n        const { html, position, tokens } = this;\r\n        let cursor = position.index;\r\n        let quote = null; // null, single-, or double-quote\r\n        let wordBegin = cursor; // index of word start\r\n        const words = []; // \"key\", \"key=value\", \"key='value'\", etc\r\n        const len = html.length;\r\n        while (cursor < len) {\r\n            const char = html.charAt(cursor);\r\n            if (quote) {\r\n                const isQuoteEnd = char === quote;\r\n                if (isQuoteEnd) {\r\n                    quote = null;\r\n                }\r\n                cursor++;\r\n                continue;\r\n            }\r\n            const isTagEnd = char === '/' || char === '>';\r\n            if (isTagEnd) {\r\n                if (cursor !== wordBegin) {\r\n                    words.push(html.slice(wordBegin, cursor));\r\n                }\r\n                break;\r\n            }\r\n            if (isWordEnd(cursor, wordBegin, html)) {\r\n                if (cursor !== wordBegin) {\r\n                    words.push(html.slice(wordBegin, cursor));\r\n                }\r\n                wordBegin = cursor + 1;\r\n                cursor++;\r\n                continue;\r\n            }\r\n            const isQuoteStart = char === '\\'' || char === '\"';\r\n            if (isQuoteStart) {\r\n                quote = char;\r\n                cursor++;\r\n                continue;\r\n            }\r\n            cursor++;\r\n        }\r\n        jumpPosition(position, html, cursor);\r\n        const wLen = words.length;\r\n        const type = 'attribute';\r\n        for (let i = 0; i < wLen; i++) {\r\n            const word = words[i];\r\n            const isNotPair = word.includes('=');\r\n            if (isNotPair) {\r\n                const secondWord = words[i + 1];\r\n                if (secondWord && secondWord.startsWith('=')) {\r\n                    if (secondWord.length > 1) {\r\n                        const newWord = word + secondWord;\r\n                        tokens.push({ type, content: newWord });\r\n                        i += 1;\r\n                        continue;\r\n                    }\r\n                    const thirdWord = words[i + 2];\r\n                    i += 1;\r\n                    if (thirdWord) {\r\n                        const newWord = word + '=' + thirdWord;\r\n                        tokens.push({ type, content: newWord });\r\n                        i += 1;\r\n                        continue;\r\n                    }\r\n                }\r\n            }\r\n            if (word.endsWith('=')) {\r\n                const secondWord = words[i + 1];\r\n                if (secondWord && !secondWord.includes('=')) {\r\n                    const newWord = word + secondWord;\r\n                    tokens.push({ type, content: newWord });\r\n                    i += 1;\r\n                    continue;\r\n                }\r\n                const newWord = word.slice(0, -1);\r\n                tokens.push({ type, content: newWord });\r\n                continue;\r\n            }\r\n            tokens.push({ type, content: word });\r\n        }\r\n    }\r\n    scanSkipTag(tagName) {\r\n        const { html, position } = this;\r\n        const safeTagName = tagName.toLowerCase();\r\n        const len = html.length;\r\n        while (position.index < len) {\r\n            const nextTag = html.indexOf('</', position.index);\r\n            if (nextTag === -1) {\r\n                this.scanText();\r\n                break;\r\n            }\r\n            jumpPosition(position, html, nextTag);\r\n            const name = this.scanTag();\r\n            if (safeTagName === name.toLowerCase()) {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=scaner.js.map","references":["/Users/inoccent/github/taro-hooks/packages/taro-runtime/src/options.ts"],"map":"{\"version\":3,\"file\":\"scaner.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/dom-external/inner-html/scaner.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/inoccent/github/taro-hooks/packages/taro-runtime/node_modules/.cache/rollup-plugin-typescript2/placeholder/dom-external/inner-html/scaner.d.ts","writeByteOrderMark":false,"text":"interface Position {\r\n    index: number;\r\n    column: number;\r\n    line: number;\r\n}\r\nexport interface Token {\r\n    type: string;\r\n    content?: string;\r\n    position?: {\r\n        start?: Position;\r\n        end?: Position;\r\n    };\r\n    close?: boolean;\r\n}\r\nexport declare class Scaner {\r\n    private tokens;\r\n    private position;\r\n    private html;\r\n    constructor(html: string);\r\n    scan(): Token[];\r\n    private scanText;\r\n    private scanComment;\r\n    private scanTag;\r\n    private scanTagStart;\r\n    private scanTagEnd;\r\n    private scanTagName;\r\n    private scanAttrs;\r\n    private scanSkipTag;\r\n}\r\nexport {};\r\n"}}
