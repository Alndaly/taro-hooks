{"code":"import { __decorate, __metadata, __param } from \"tslib\";\r\nimport { inject, injectable } from 'inversify';\r\nimport { isArray, isObject, warn } from '@tarojs/shared';\r\nimport SERVICE_IDENTIFIER from '../constants/identifiers';\r\nlet TaroEventTarget = class TaroEventTarget {\r\n    constructor(// eslint-disable-next-line @typescript-eslint/indent\r\n    hooks) {\r\n        this.__handlers = {};\r\n        this.hooks = hooks;\r\n    }\r\n    addEventListener(type, handler, options) {\r\n        var _a, _b;\r\n        (_b = (_a = this.hooks).onAddEvent) === null || _b === void 0 ? void 0 : _b.call(_a, type, handler, options, this);\r\n        if (type === 'regionchange') {\r\n            // map 组件的 regionchange 事件非常特殊，详情：https://github.com/NervJS/taro/issues/5766\r\n            this.addEventListener('begin', handler, options);\r\n            this.addEventListener('end', handler, options);\r\n            return;\r\n        }\r\n        type = type.toLowerCase();\r\n        const handlers = this.__handlers[type];\r\n        let isCapture = Boolean(options);\r\n        let isOnce = false;\r\n        if (isObject(options)) {\r\n            isCapture = Boolean(options.capture);\r\n            isOnce = Boolean(options.once);\r\n        }\r\n        if (isOnce) {\r\n            const wrapper = function () {\r\n                handler.apply(this, arguments); // this 指向 Element\r\n                this.removeEventListener(type, wrapper);\r\n            };\r\n            this.addEventListener(type, wrapper, Object.assign(Object.assign({}, options), { once: false }));\r\n            return;\r\n        }\r\n        process.env.NODE_ENV !== 'production' && warn(isCapture, 'Taro 暂未实现 event 的 capture 特性。');\r\n        if (isArray(handlers)) {\r\n            handlers.push(handler);\r\n        }\r\n        else {\r\n            this.__handlers[type] = [handler];\r\n        }\r\n    }\r\n    removeEventListener(type, handler) {\r\n        type = type.toLowerCase();\r\n        if (handler == null) {\r\n            return;\r\n        }\r\n        const handlers = this.__handlers[type];\r\n        if (!isArray(handlers)) {\r\n            return;\r\n        }\r\n        const index = handlers.indexOf(handler);\r\n        process.env.NODE_ENV !== 'production' && warn(index === -1, `事件: '${type}' 没有注册在 DOM 中，因此不会被移除。`);\r\n        handlers.splice(index, 1);\r\n    }\r\n    isAnyEventBinded() {\r\n        const handlers = this.__handlers;\r\n        const isAnyEventBinded = Object.keys(handlers).find(key => handlers[key].length);\r\n        return Boolean(isAnyEventBinded);\r\n    }\r\n};\r\nTaroEventTarget = __decorate([\r\n    injectable(),\r\n    __param(0, inject(SERVICE_IDENTIFIER.Hooks)),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], TaroEventTarget);\r\nexport { TaroEventTarget };\r\n//# sourceMappingURL=event-target.js.map","references":["/Users/inoccent/github/taro-hooks/node_modules/inversify/lib/inversify.d.ts","/Users/inoccent/github/taro-hooks/node_modules/@tarojs/shared/dist/index.d.ts","/Users/inoccent/github/taro-hooks/packages/taro-runtime/src/constants/identifiers.ts","/Users/inoccent/github/taro-hooks/packages/taro-runtime/src/interface/index.ts"],"map":"{\"version\":3,\"file\":\"event-target.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/dom/event-target.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/inoccent/github/taro-hooks/packages/taro-runtime/node_modules/.cache/rollup-plugin-typescript2/placeholder/dom/event-target.d.ts","writeByteOrderMark":false,"text":"import type { EventHandler, AddEventListenerOptions, IHooks } from '../interface';\r\nexport declare class TaroEventTarget {\r\n    __handlers: Record<string, EventHandler[]>;\r\n    hooks: IHooks;\r\n    constructor(// eslint-disable-next-line @typescript-eslint/indent\r\n    hooks: IHooks);\r\n    addEventListener(type: string, handler: EventHandler, options?: boolean | AddEventListenerOptions): void;\r\n    removeEventListener(type: string, handler: EventHandler): void;\r\n    isAnyEventBinded(): boolean;\r\n}\r\n"}}
